package com.java.item.itemaddmeaaagelistener;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.TextMessage;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;

import com.java.model.TbItem;
import com.java.model.TbItemDesc;
import com.java.service.ItemServiceI;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

public class ItemAddMessageListener implements MessageListener {

	@Resource
	private ItemServiceI itemService;
	
	@Resource
	private FreeMarkerConfigurer freeMarkerConfigurer;
	
	@Value("${HTML_OUT_PUT_PATH}")
	private String HTML_OUT_PUT_PATH;
	
	@Override
	public void onMessage(Message message) {
		try {
			if (message instanceof TextMessage) {
				TextMessage textMessage = (TextMessage) message;
				String sid = textMessage.getText();
				Long id = Long.parseLong(sid);
				
				Thread.sleep(1000);
				
				TbItem tbItem = itemService.getItemById(id);
				TbItemDesc tbItemDesc = itemService.getItemDescById(id);
				
				Configuration configuration = freeMarkerConfigurer.getConfiguration();
				Template template = configuration.getTemplate("item.ftl");
				Map map = new HashMap<>();
				
				map.put("item", tbItem);
				map.put("itemDesc", tbItemDesc);
				Writer writer = new FileWriter(new File(HTML_OUT_PUT_PATH+sid+".html"));
				template.process(map, writer);
				writer.close();
				
				
			}
		} catch (JMSException | IOException | TemplateException | InterruptedException e) {
			e.printStackTrace();
		}
	}
}
